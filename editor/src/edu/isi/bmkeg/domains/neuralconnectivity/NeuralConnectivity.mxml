<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: NeuralConnectivity.mxml 50 2011-06-09 22:55:52Z taruss2000@gmail.com $ 
     $Date: 2011-06-09 15:55:52 -0700 (Thu, 09 Jun 2011) $
     $Revision: 50 $ 
     
     Panel for displaying a connectivity matrix between brain regions and responding
     to requests for the underlying evidence that supports the connections.
     -->
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
	label="Neural Connectivity">
	<mx:Script>
		<![CDATA[
			import mx.formatters.NumberFormatter;
			import mx.formatters.NumberBaseRoundType;
			import flash.utils.getTimer;
			import flash.net.navigateToURL;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridItemRenderer;
			import mx.core.Application;
			
			import mx.events.ListEvent;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.http.HTTPService;
			import edu.isi.bmkeg.utils.powerloom.PL;
			
			namespace plsoap = "http://www.isi.edu/powerloom/";
			private var pdfURLhead:String = Application.application.serverUrl + "ploom/kefed/pdf/";
			private var xmlURLhead:String = Application.application.serverUrl + "ploom/kefed/xml/TrainingOutput/config0254/";
			private var pubmedURLhead:String = "https://www.ncbi.nlm.nih.gov/pubmed/";
			private var matrixURLhead:String = Application.application.serverUrl + "ploom/kbs/";
			private var loader:URLLoader = new URLLoader();
			private var startTime:uint = 0;
			
			private static const LEGEND_SIZE:int = 8;
			
			/** Brain regions we care about. */
			private var brainRegions:Array = ["CA1","CA3","DG","ENT","PAR","POST","PRE",
											  "SUB","LM","MM","SUM","ACA","ILA","PL","PERI",
											  "RSP","AD","AM","AV","IAM","LD","MD"];
			/** Ordered List of values for representing density as reported in the XML file.
			 */
			private var densityValues:Array = ["", "0", "present", "very-sparse", "sparse", "sparse-to-moderate",
								               "moderate", "moderate-to-dense", "dense", "very-dense"];
			/** Ordered list of symbols for density that corresponds to the densityValues list.
			 *  The correspondence is by position.  A many to one mapping is implemented, since more
			 *  than one density value will map to the same symbol.
			 */
			private var densitySymbols:Array = ["?", "0", "*", "+", "+", "++", "++", "+++", "+++", "+++"];
			
			[Bindable]
			private var evidenceCollection:ArrayCollection = new ArrayCollection();

			private function initializeMatrix ():void {
				loader.addEventListener(Event.COMPLETE, handleMatrixData);
				setupMatrix();
			}
						
			public function setupMatrix():void {
//				processMatrixData(matrixData);
				loader.load(new URLRequest(matrixURLhead + "matrix-data.xml"));
			}
			
			public function handleMatrixData(event:Event):void {
				var matrixData:XML = new XML(loader.data);
				trace("Matrix data loaded. " + matrixData.elements("row").length() + " rows");
//				trace(matrixData);
				processMatrixData(matrixData);
			}

			// Ordering function for density values.
			public function higherDensity(x:String, y:String):Boolean {
				return densityValues.indexOf(x) > densityValues.indexOf(y);
			}

			/** Iterates through the XML data representation and constructs the
			 *  connection matrix based on the information in that XML file.
			 * 
			 * @param data The XML contents describing connections
			 */
			public function processMatrixData(data:XML):void {
				var columnHeaders:ArrayCollection = new ArrayCollection();
				var matrixDataProvider:ArrayCollection = new ArrayCollection();
				var dgc:AdvancedDataGridColumn = new AdvancedDataGridColumn("Source");
				// Get a simpler renderer to reclaim space otherwise reserved for sorting
				// information in the column headers.  Allows more compact matrix.
				var hRenderer:IFactory = new ClassFactory(AdvancedDataGridItemRenderer);
				dgc.sortable = false;
				dgc.width = 60;
				dgc.headerRenderer = hRenderer;
				columnHeaders.addItem(dgc);
				for each (var row:XML in data.children()) {
					var headerValue:String = row.@header;
					dgc = new AdvancedDataGridColumn(headerValue);
					dgc.sortable = false;
					dgc.width = 45;
					dgc.headerRenderer = hRenderer;
					columnHeaders.addItem(dgc);
					var rowObject:Object = new Object();
					rowObject.Source = row.@header;
					for each (var col:XML in row.children()) {
						var experiments:XMLList = col.children();
						if (experiments.length() > 0) {
							var max:int = 0;
							// Find the largest reported density value and use that.
							for each (var experiment:XML in experiments) {
								var density:String = experiment.@density;
								var score:int = densityValues.indexOf(density);
								if (score > max) {
									max = score;
								}
							}
							rowObject[col.@header] = densitySymbols[max];
						}
					}
					matrixDataProvider.addItem(rowObject);
				}
				connectionMatrix.dataProvider = matrixDataProvider;
				connectionMatrix.columns = columnHeaders.toArray();
			}
		
			/**  Create and submit a PowerLoom query to find the experiments
			 *   that constitute evidence for a connection between the source
			 *   and the target brain locations.  The answer will be handled
			 *   by an asynchronous event handler.
			 * 
			 * @param source The starting brain region for the connection
			 * @param target The ending brain region for the connection
			 */
			public function getEvidence(source:String, target:String):void {
				startTime = getTimer();
				evidenceCount.text = "Searching...";
				evidenceTime.text = "";
				evidenceCollection.removeAll();
				var cmd:XML = <retrieval xmlns="http://www.isi.edu/powerloom/">
						<module>EXPERIMENTS</module>
						<nresults>ALL</nresults>
						<pattern>(?cite ?chemical ?labeling-type ?labeling 
						?injection-part-of ?injection-overlaps  ?labeling-part-of ?labeling-overlaps
						?xsource ?xlabel ?id ?pmid ?source ?target)</pattern>
	<!--						<options>:INFERENCE-LEVEL :ASSERTION</options> -->
	                    <options>:MAXIMUM-DEPTH 60</options>
						(AND (= ?source "{source}")
						     (= ?target "{target}")
						     (EXISTS (?pub ?ref ?datum ?injection ?injection-site ?label-site ?label-result ?exp)
						       (AND 
						         (evidence-about-connection-from-regions (brain-region-for ?source) (brain-region-for ?target) ?labeling-type ?labeling ?datum ?exp ?pub)
						         (BOUND-VARIABLES ?exp ?datum)
		                         (datum-context-value ?datum 87428E58-04EE-BE64-D61B-F41A2B69954B ?injection)
		                         (datum-context-value ?datum 3A5975D7-FE69-26FD-48C8-F417C3D3014A ?label-site)
		                         (556820EC-350C-EABF-6BB9-F41AC5270DB8 ?injection ?chemical)
		                         (5FF4DB53-C895-82F1-EF38-F41AA0F89A7A ?injection ?injection-site)
 		                         
 		                         (BOUND-VARIABLES ?injection-site ?label-site)
 		                         (QUERY (AND 
 		                            (COLLECT-INTO-SET (SETOFALL ?x (/PART/OVERLAPS ?injection-site (brain-region-for ?x))) ?injection-overlaps)
 		                            (COLLECT-INTO-SET (SETOFALL ?x (/PART/PROPER-PART-OF ?injection-site (brain-region-for ?x))) ?injection-part-of)
 		                            (COLLECT-INTO-SET (SETOFALL ?x (/PART/OVERLAPS ?label-site (brain-region-for ?x))) ?labeling-overlaps)
 		                            (COLLECT-INTO-SET (SETOFALL ?x (/PART/PROPER-PART-OF ?label-site (brain-region-for ?x))) ?labeling-part-of)
 		                         ) :INFERENCE-LEVEL :ASSERTION)
 		                      (experiment-reference ?exp ?ref)
 		                      (experiment-source ?exp ?xsource ?xlabel)
 		                      (BOUND-VARIABLES ?ref)
						     (reference-text ?ref ?cite)
						     (reference-digital-library-id ?ref ?id)
						     (reference-pmid ?ref ?pmid)
 		                         ))
						     )
		       		</retrieval>;
//				trace(cmd);
				evidenceWS.Retrieval(cmd);
			}

			/** Handle the answer to a query to find experiments that constitute
			 *  evidence for a connection.  Display the results using a standard
			 *  PowerLoom query answer widget.
			 * 
			 * @param event The result event from the PowerLoom WS query
			 */			
			public function evidenceResultHandler(event:ResultEvent):void {
				clearError();
				var xmlDoc:XML = new XML(evidenceWS.Retrieval.lastResult);
				var nResults:int = int(xmlDoc.plsoap::nresults);
				for (var i:int = 0; i < nResults; i++) {
					evidenceCollection.addItem(makeTupleObject(xmlDoc.plsoap::tuple[i]));
				}
				var stopTime:uint = getTimer();
				evidenceCount.text = xmlDoc.plsoap::nresults.toString() + " data point" + (nResults == 1 ? "" : "s");
				evidenceTime.text = elapsedTimeFormatter.format((stopTime - startTime) / 1000.0) + "s";
				evidenceFile.executeBindings();
			}
			
			private function makeTupleObject(tuple:XML):Object {
				var tupleObject:Object = new Object();
				var region:String = null;

				tupleObject["Citation"] = PL.formatQueryItem(tuple.plsoap::item[0], false, true);
				tupleObject["Chemical"] = PL.formatQueryItem(tuple.plsoap::item[1], false, false);
				tupleObject["LabelType"] = PL.formatQueryItem(tuple.plsoap::item[2], false, false);
				tupleObject["LabelDensity"] =PL.formatQueryItem(tuple.plsoap::item[3], false, false);
				
				region = PL.formatQueryItem(tuple.plsoap::item[4], true, true);
				if (region != "") {
					tupleObject["Injection"] = "into " + region;						
				} else {
					tupleObject["Injection"] = "overlaps " + PL.formatQueryItem(tuple.plsoap::item[5], true, true);
				}
				region = PL.formatQueryItem(tuple.plsoap::item[6], true, true);
				if (region != "") {
					tupleObject["LabelLocation"] = "in " + region;						
				} else {
					tupleObject["LabelLocation"] = "overlaps " + PL.formatQueryItem(tuple.plsoap::item[7], true, true);
				}
				
				tupleObject["ExpSource"] = PL.formatQueryItem(tuple.plsoap::item[8], false, true);
				tupleObject["ExpLabel"] = PL.formatQueryItem(tuple.plsoap::item[9], false, true);
				tupleObject["id"] = PL.formatQueryItem(tuple.plsoap::item[10], false, false);
				tupleObject["pmid"] = PL.formatQueryItem(tuple.plsoap::item[11], false, false);
				
				return tupleObject;
			}
			
			public function clearError ():void {
				currentState="";
				if (errorType && errorDetail) {
					errorType.text="";
					errorDetail.text="";
				}
			}
			
			public function faultHandler(event:FaultEvent):void {
				currentState="Show_Errors";
				errorType.text=event.fault.faultString;
				errorDetail.text=event.fault.faultDetail;
			}
			
			/** Handler for double-clicks on a connection matrix cell.\
			 *  If the cell indicates evidence for or against a connection,
			 *  then the source and target regions will be identified and
			 *  a query issued to return the evidence.
			 *  
			 *  @event The list double-click event with the clicked coordinates.
			 */
			public function connectionDoubleClickHandler(event:ListEvent):void {
				var item:Object = connectionMatrix.dataProvider.getItemAt(event.rowIndex);
				var col:AdvancedDataGridColumn = connectionMatrix.columns[event.columnIndex];
				trace("Connection " + item.Source + " => " + col.dataField + "  = " + item[col.dataField]);
				connectionDescription.text = item.Source + " => " + col.dataField;
				evidenceCount.text = "";
				libraryID.text = "";
				evidenceFile.dataProvider = null;
				if (event.columnIndex > 0 && item[col.dataField] != null) {
					getEvidence(item.Source, col.dataField);
				} else {
					evidenceCount.text = "No data";
					evidenceTime.text = "";
				}
			}
			
			/** Handler for a change in the selection of evidence.  Updates
			 *  the LibraryID text field.
			 */
			public function handleEvidenceChange(event:Event):void {
				if (evidenceFile.selectedItem == null) {
					libraryID.text = "";
					pmidLabel.text = "";
				} else {
					libraryID.text = evidenceFile.selectedItem.id;
					pmidLabel.text = evidenceFile.selectedItem.pmid;
				}
			}
			
			/** Handler for double-clicks in an evidence file row.  Only the row
			 *  is considered.  The exact cell is unimportant.  This will issue
			 *  a call to display the underlying documents for this particular evidence.
			 *  This includes both the PDF file and a processed XML version.
			 * 
			 * @event The list double-click event with the row coordinate.
			 */
			public function evidenceDoubleClickHandler(event:ListEvent):void {
				var item:Object = evidenceFile.dataProvider.getItemAt(event.rowIndex);
				trace("Reference = " + item.id + "    PMID = " + item.pmid);
				if (item.pmid != null && item.pmid != "") {
					var pmid:String = item.pmid; // FIX ME.
//					var pdfFilename:String = pdfURLhead + item.id + ".pdf"
//					var xmlFilename:String = xmlURLhead + item.id + "-ns_machineMarked.xml";
//					trace("  file  = " + pdfFilename);
					libraryID.text=item.id;
					pmidLabel.text = pmid;
//					navigateToURL(new URLRequest(pdfFilename), "PDF");
//					navigateToURL(new URLRequest(xmlFilename), "XML");
					navigateToURL(new URLRequest(pubmedURLhead + pmid), "PubMed");
				}
			}
			
			private function handlePlain(event:ResultEvent):void
			{
//				xmlContents.htmlText = event.result.toString();
			}


			private function handleFault(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n" + event.fault.faultDetail, "Error");
			}

		]]>
	</mx:Script>


	<mx:XML id="matrixData" source="matrix-data.xml"/>
	<mx:NumberFormatter id="elapsedTimeFormatter" precision="1"/>
	
	<mx:WebService id="evidenceWS"
		fault="faultHandler(event);"
		useProxy="false"
		wsdl='{Application.application.serverUrl + "ploom/soap-wsdl/powerloom-soap-service.wsdl"}'
		showBusyCursor="true">
		<mx:operation name="Retrieval"
			resultFormat="e4x"
			result="evidenceResultHandler(event);"/>
	</mx:WebService>
		
	<mx:HTTPService id="plainRPC"
		result="handlePlain(event);"
		fault="handleFault(event);"
		resultFormat="xml">
	</mx:HTTPService>
	
	<mx:states>
		<mx:State name="Show_Errors">
			<mx:AddChild relativeTo="{content}">
				<mx:VBox width="100%" height="10%">
					<mx:HRule width="100%"/>
					<mx:Label text="Errors" color="gray"/>
				    <mx:Label id="errorType" color="red"/>
				    <mx:Text id="errorDetail" color="red"/>
				</mx:VBox>
			</mx:AddChild>	
		</mx:State>
	</mx:states>
	
	<mx:VDividedBox id="content" width="100%" height="100%">
		<mx:VBox id="matrixBox" height="70%">
			<mx:AdvancedDataGrid id="connectionMatrix" width="100%" height="100%" 
				 selectionMode="singleCell"
				 doubleClickEnabled="true" itemDoubleClick="connectionDoubleClickHandler(event)"
				 initialize="processMatrixData(matrixData);"/>
			<mx:Label id="legend" fontSize="{LEGEND_SIZE}"
				text="Connection strength: 0 = none; + = weak; ++ = moderate; +++ = strong; * = unknown strength     Double-click to see evidence for connection."/>
		</mx:VBox>
	    <mx:VBox id="evidenceBox" height="30%">
			<mx:HBox>
				<mx:Label id="connectionDescription" color="black" text=""/>
				<mx:Label id="evidenceCount" color="black" text=""/>
				<mx:Label id="evidenceTime" color="gray" text=""/>
			</mx:HBox>
			<mx:DataGrid id="evidenceFile" width="100%" height="100%" 
				dataProvider="{evidenceCollection}"
				change="handleEvidenceChange(event)"
				doubleClickEnabled="true" itemDoubleClick="evidenceDoubleClickHandler(event)">
				<mx:columns>
					<mx:DataGridColumn headerText="Citation" dataField="Citation" width="200"/>
					<mx:DataGridColumn headerText="PubMedID" dataField="pmid" width="70" textAlign="right"/>
					<mx:DataGridColumn headerText="Chemical" dataField="Chemical" width="200"/>
					<mx:DataGridColumn headerText="Label Type" dataField="LabelType" width="70"/>
					<mx:DataGridColumn headerText="Label Density" dataField="LabelDensity" width="100"/>
					<mx:DataGridColumn headerText="Injection Location" dataField="Injection" width="150"/>
					<mx:DataGridColumn headerText="Label Location" dataField="LabelLocation" width="150"/>
					<mx:DataGridColumn headerText="Exp. Source" dataField="ExpSource"/>
					<mx:DataGridColumn headerText="Exp. Label" dataField="ExpLabel"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:HBox id="pubid">
				<mx:Label text="PubMed ID:"/>
				<mx:Label id="pmidLabel"/>
				<mx:Spacer width="15"/>
				<mx:Label text="Library ID:"/>
				<mx:Label id="libraryID"/>
			</mx:HBox>
			<mx:Label fontSize="{LEGEND_SIZE}" text="Double click to show PubMed page for papers with PubMedID"/>
		</mx:VBox>
	</mx:VDividedBox>
</mx:Panel>
